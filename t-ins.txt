**Writing thoughts**

Picture yourself as a teacher **teaching a newbie how to solve this issue** in this repository, and try to avoid taking shortcuts while fixing the issue.

- **Make sure there are no grammar mistakes on the thoughts and write them in English. If necessary use an LLM to review it and make small adjustments.**
- All thoughts must be written in 1st person, e.g.: ‚ÄúI think‚Äù, ‚ÄúI will‚Äù.
  - **Do not add obvious thoughts** after the actions occurred, such as: I implemented the method that does‚Ä¶
  - **Add thoughts before executing the action**, such as: ‚ÄúBased on the problem statement, I will look for occurrences of ‚ÄòXYZ‚Äô and identify the test file that tests this specific method so I can create a different test case that handles the expected functionality ‚ÄòABC‚Äô by doing‚Ä¶‚Äù
- Focus on quality over thought volume/frequency.
- High quality thoughts express specific human insight into the problem by referring to **relevant modules, classes and functions by name**, referring back to specifics of the initial issue where appropriate.
- Example
  - Low quality: ‚Äú_I'm now going to check what the function Foo does by reading the implementation_‚Äù
  - **High quality:** ‚Äú_After inspecting module X, it is clear that Foo is the function that handles the critical logic leading to the reported issue. I will now inspect the implementation of this function by searching for ‚Äúdef Foo‚Äù in the repo and navigating to the resulting module. I'll look for signs that corner cases are handled correctly, particularly the corner cases tested in test_foo_A and test_foo_b of ../test/test_foo.py. Once I determine whether the implementation is correctly handling corner cases, I'll decide on the implementation plan to fix the module.‚Äù_
- It's expected that you spend more time writing thoughts on the beginning of the task since there's more ambiguity, so it's expected that the extensiveness of the thoughts should reduce as you approach the end of the task.
- A high quality trace will contain at least one ‚Äúplanning thoughts‚Äù which define the scaffold of the solution strategy at a high level. If new information is revealed through iterative testing, that is another opportunity for a planning thought stating what has been learned from the relevant errors and how those findings affect the overall approach.

<aside>
üí°

**Practical example**

**When writing your thoughts, make sure to explain what's going on in your head as a programmer, not describing the past.**

**üí£Problem statement:**

I want to write a function that handles three different states depending on the network response.üí°

**Thought 1:**

I will write three different specs for the class NetworkHandler on NetworkHandlerTest that will check each one of the possible alternatives, covering every possible branch: one for the success, another for response with error and another with for connection issues.

**Thought 2:**

Now I'll check the NetworkHandler class and look for the method that handles these. I will search for the term handleRequest and similar alternatives to try to find the method that should be changed.

**Thought 3:**

Now that I found the method `handleNetworkRequest` I will implement a switch case that will check for the parameter network and access the attribute response, but I still don't know what are the possible values of `response`so before that I'll check the implementation of this class.

**Thought 4:**
**Practical example**

**When writing your thoughts, make sure to explain what's going on in your head as a programmer, not describing the past.**

**üí£Problem statement:**

I want to write a function that handles three different states depending on the network response.üí°

**Thought 1:**

I will write three different specs for the class NetworkHandler on NetworkHandlerTest that will check each one of the possible alternatives, covering every possible branch: one for the success, another for response with error and another with for connection issues.

**Thought 2:**

Now I'll check the NetworkHandler class and look for the method that handles these. I will search for the term handleRequest and similar alternatives to try to find the method that should be changed.

**Thought 3:**

Now that I found the method `handleNetworkRequest` I will implement a switch case that will check for the parameter network and access the attribute response, but I still don't know what are the possible values of `response`so before that I'll check the implementation of this class.

**Thought 4:**

Since the `response` is actually an object instead of a simple value, I found I can use the parameter `httpStatus`and the parameter `error` to decide which branch of code it should trigger from my switch-case. I'll write the switch to include a branch for the error, a branch for the connection issue and another one for success, which should make the tests pass after implemented.

PLease not be too verbose, maximun 50 wrds, try to use file names and precise and non ambiguous explanations, dont ask extra questions, just put it on the touhght format.
